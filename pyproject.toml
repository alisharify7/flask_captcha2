[project]
name = "Flask-captcha2"
version = "3.1.0"
description = "Flask plugin to integrate Google captcha (version 2, 3) and local captcha (image, voice) with Flask applications"
readme = "README.md"
authors = [
    { name = "ali sharify", email = "alisharifyofficial@gmail.com" }
]
license = { text = "MIT" }
requires-python = ">=3.8"
keywords = [
    "flask",
    "captcha",
    "flask-captcha",
    "flask-captcha2",
    "flask_captcha2",
    "flask security",
    "flask-images-captcha",
    "Google captcha for flask",
]
dependencies = [
    "flask>=2.2.5",
    "markupsafe>=2.1.2",
    "requests>=2.30.0",
    "captcha>=0.5.0"
]

[project.urls]
Homepage = "https://github.com/alisharify7/flask_captcha2"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests*"]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Environment :: Web Environment",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP",
    "Framework :: Flask"
]

[dependency-groups]
dev = [
    "black>=24.8.0",
    "flake8>=5.0.4",
    "mypy>=1.14.1",
    "pylint>=3.2.7",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py313']
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | .venv
  | data
)/
'''
fast = true
color = true
verbose = true
check = false


[tool.flake8]
max-line-length = 88
ignore = [
    "E501",  # Ignore line length warnings
    "W503",  # Ignore "line break before binary operator" warnings
    "E203"   # Ignore spacing around operators warnings
]
exclude = [
    ".git",
    ".tox",
    ".venv",
    "build",
    "dist",
    "_build"
]
max-complexity = 10
select = [
    "C",  # Cyclomatic complexity checks
    "E",  # Errors
    "F",  # Pyflakes checks
    "W",  # Warnings
]

[tool.mypy]
files = "."
disallow_untyped-calls = true
disallow_untyped-defs = true
strict = true
